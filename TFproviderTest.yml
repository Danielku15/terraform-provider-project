resources:
  - name: terraform_provider_project
    type: GitRepo
    configuration:
      gitProvider: partnership_github
      path: jfrog/terraform-provider-project # if path is modified, change the name as well, per Pipelines doc
      branches:
        include: master
      buildOn:
        commit: false
        pullRequestCreate: false
      cancelPendingRunsOn:
        pullRequestUpdate: false
pipelines:
  - name: tf_provider_project_gke
    configuration:
      environmentVariables:
        readOnly:
          GKE_ZONE: ${int_gkeEnvVars_gke_zone}
          GKE_PROJECT: ${int_gkeEnvVars_gke_project}
          MACHINE_TYPE: "e2-standard-4"
          NUM_NODES: ${int_gkeEnvVars_NUM_NODES} # default is 3
          ZSCALER_CIDR1: ${int_zscalerIPs_CIDR1}
          ZSCALER_CIDR2: ${int_zscalerIPs_CIDR2}
          NEW_RT_PASSWORD: ${int_gkeEnvVars_new_rt_password}
          CLEANUP_RESOURCES: "true"
    steps:
      - name: gke_jfrog_rt_xray_create
        type: Bash
        configuration:
          priority: 0
          runtime:
            type: image
            image:
              auto:
                language: java
                versions:
                  - "11"
          integrations:
            - name: gkeEnvVars
            - name: zscalerIPs
            - name: partnersSlack
            - name: partnership_jfrog_io
            - name: gcpK8sPartnershipProject
            - name: partnership_github
          inputResources:
            - name: terraform_provider_project
            - name: terraform_provider_shared
          environmentVariables:
            GKE_CLUSTER: ${int_gkeEnvVars_gke_cluster}
        execution:
          onStart:
            - echo "Sending status to GitHub."
            - printenv
            - export STATE="pending"
            - export DESCRIPTION="Pipeline run is in progress."
            - cd ${res_terraform_provider_shared_resourcePath}
            - ./scripts/github-status.sh ${res_terraform_provider_project_gitProvider_token} ${res_terraform_provider_project_gitRepoFullName} ${res_terraform_provider_project_commitSha} && cd ${PWD}
            - echo "Preparing for work. Install Helm"
            - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 && chmod 700 get_helm.sh
            - echo "Run Helm installation script" && ./get_helm.sh && rm get_helm.sh
            - jfrog config show && jfrog --version
            - helm version
            - kubectl version --client
            - echo "Install gcloud cli"
            - sudo apt-get install apt-transport-https ca-certificates gnupg
            - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            - sudo apt-get update && sudo apt-get install -y google-cloud-cli google-cloud-sdk-gke-gcloud-auth-plugin
            - gke-gcloud-auth-plugin --version
            - echo "Renaming GKE_CLUSTER variable, so k8s cluster name will be unique."
            - add_run_variables GKE_CLUSTER=tf-provider-project-$(date +%s)
            - echo "Whitelist Pipelines Node CIDR to be able to run Artifactory and Xray tests. Same variable is used in gke/create_cluster step to restrict access to the control plane."
            - export WHITELIST_CIDR=$(curl ifconfig.me)/32 && echo ${WHITELIST_CIDR}
          onExecute:
            - echo "Create GKE k8s cluster"
            - cd ${res_terraform_provider_shared_resourcePath}
            - ./scripts/create_gke_cluster.sh && cd ${PWD}
            - echo "Creating Artifactory License Secret"
            - jfrog rt dl pipelines-resources/licenses/artifactory.cluster.license
            - kubectl create secret generic artifactory-license --from-file=licenses/artifactory.cluster.license
            - helm repo add jfrog https://charts.jfrog.io/
            - helm repo update
            - add_run_variables RT_HELM_CHART_VERSION=$(helm search repo | grep "artifactory " | awk '{$1=$1};1' |  cut -f2 -d " ")
            - echo "Helm chart version "${RT_HELM_CHART_VERSION}
            - add_run_variables ARTIFACTORY_VERSION=$(helm search repo | grep "artifactory " | awk '{$1=$1};1' |  cut -f3 -d " ")
            - echo "Artifactory version "${ARTIFACTORY_VERSION}
            - add_run_variables xray_helm_chart_version=$(helm search repo | grep "/xray" | awk '{$1=$1};1' |  cut -f2 -d " ")
            - echo "Xray Helm chart version "${xray_helm_chart_version}
            - add_run_variables XRAY_VERSION=$(helm search repo | grep "/xray" | awk '{$1=$1};1' |  cut -f3 -d " ")
            - echo "Xray version "${XRAY_VERSION}
            - echo "Installing Artifactory"
            - export MASTER_KEY=$(openssl rand -hex 32)
            - export JOIN_KEY=$(openssl rand -hex 32)
            - helm upgrade --install artifactory  jfrog/artifactory --set nginx.service.ssloffload=true --set artifactory.masterKey=$MASTER_KEY --set artifactory.joinKey=$JOIN_KEY --set artifactory.license.secret=artifactory-license --set artifactory.license.dataKey=artifactory.cluster.license --set postgresql.persistence.size=50Gi --set artifactory.persistence.size=50Gi --set nginx.service.loadBalancerSourceRanges="{${ZSCALER_CIDR1},${ZSCALER_CIDR2},${WHITELIST_CIDR}}"
            - echo "Waiting for Artifactory roll out"
            - kubectl rollout status deployment/artifactory-artifactory-nginx
            - kubectl rollout status statefulset/artifactory
            - echo "Installing JFrog Xray"
            - helm upgrade --install xray jfrog/xray --set postgresql.persistence.size=200Gi --set xray.jfrogUrl=http://artifactory-artifactory-nginx --set xray.masterKey=$MASTER_KEY --set xray.joinKey=$JOIN_KEY
            - kubectl rollout status statefulset/xray-postgresql
            - kubectl rollout status statefulset/xray-rabbitmq
            - kubectl rollout status statefulset/xray
            - export RT_URL=$(kubectl get svc artifactory-artifactory-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            - add_run_variables JFROG_URL="http://${RT_URL}"
            - add_run_variables PROJECT_URL=${JFROG_URL}
            - git clone https://${int_partnership_github_token}@github.com/jfrog/partner-integration-tests.git
            - echo "Common test will check services health and change the default admin user password, if NEW_RT_PASSWORD is set. Test uses RT_URL var."
            - ./partner-integration-tests/gradlew -p partner-integration-tests artifactory_common
          onSuccess:
            - echo "GKE cluster created successfully with JFrog Artifactory and Xray"
            - echo "Visit Artifactory at http://${RT_URL}"
            - echo "Artifactory username admin"
            - echo "Artifactory password ${NEW_RT_PASSWORD}"
          onFailure:
            - echo "JFrog Artifactory and Xray creation failed, sending status to GitHub and Slack."
            - export STATE="failure"
            - export DESCRIPTION="Pipeline has failed."
            - cd ${res_terraform_provider_shared_resourcePath}
            - ./scripts/github-status.sh ${res_terraform_provider_project_gitProvider_token} ${res_terraform_provider_project_gitRepoFullName} ${res_terraform_provider_project_commitSha} && cd ${PWD}
            - send_notification partnersSlack --text "<${res_terraform_provider_project_gitRepoRepositoryHttpsUrl}|Terraform Provider Project>. Pipeline failed on <${step_url}|${step_name}> step"
            - >-
              if [[ -n "${GKE_CLUSTER}" ]]; then
                echo "Removing GKE cluster ${GKE_CLUSTER}"
                cd ${res_terraform_provider_shared_resourcePath}
                ./scripts/delete_cluster.sh && cd ${PWD}
              fi
          onComplete:
            - echo "JFrog Artifactory and Xray Job Complete"

      - name: build_and_run_tf_provider
        type: Bash
        configuration:
          priority: 1
          timeoutSeconds: 2400 # 40 minutes
          runtime:
            type: image
            image:
              auto:
                language: go
                versions:
                  - "1.18"
          integrations:
            - name: gcpK8sPartnershipProject
            - name: partnersSlack
            - name: gkeEnvVars
            - name: partnership_github
          inputSteps:
            - name: gke_jfrog_rt_xray_create
          inputResources:
            - name: terraform_provider_project
        execution:
          onStart:
            - echo "Preparing for work..."
            - echo "Make sure that changes merged into development branch don't break the TF provider"
            - go version
            - echo "Install latest Terraform version"
            - wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            - gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
            - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            - sudo apt update && apt-get install terraform && terraform -version
            - echo "Install GoReleaser"
            - echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
            - sudo apt update
            - sudo apt install goreleaser
          onExecute:
            - add_run_variables gitHubRepoUrl=${res_terraform_provider_project_gitRepoRepositorySshUrl}
            - add_run_variables TFProviderRepo=$(echo ${gitHubRepoUrl} | sed -e 's/git@/@/g' -e 's/:/\//g')
            - add_run_variables repoFolder=$(echo "${res_terraform_provider_project_gitRepoFullName}" | sed -e 's/.*\///g')
            - cd ${res_terraform_provider_project_resourcePath}
            - echo "Verify the code contents merged feature branch with development branch"
            - git branch && ls -al
            - add_run_variables PROVIDER_VERSION=$(git describe --tags --abbrev=0 | sed  -n 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1.\2.\3/p')
            - echo "Add variables needed to run Terraform Provider Project"
            - echo "PROJECT_URL variable, needed to run the provider tests - ${PROJECT_URL}"
            - export ARTIFACTORY_USERNAME=admin
            - export ARTIFACTORY_PASSWORD=${NEW_RT_PASSWORD} && echo ${ARTIFACTORY_PASSWORD}
            - echo "Get cookie to generate Access token. There is no public API to generate Access token using username and password"
            - >-
              export COOKIES=$(curl -c - "${JFROG_URL}/ui/api/v1/ui/auth/login?_spring_security_remember_me=false" \
                            --header "accept: application/json, text/plain, */*" \
                            --header "content-type: application/json;charset=UTF-8" \
                            --header "x-requested-with: XMLHttpRequest" \
                            -d '{"user":"'"${ARTIFACTORY_USERNAME}"'","password":"'"${ARTIFACTORY_PASSWORD}"'","type":"login"}' | grep FALSE)
            - export REFRESHTOKEN=$(echo $COOKIES | grep REFRESHTOKEN | awk '{print $7 }')
            - export ACCESSTOKEN=$(echo $COOKIES | grep ACCESSTOKEN | awk '{print $14 }') # awk returns null on Mac, and the actual key on Ubuntu
            - >-
              export ACCESS_KEY=$(curl -g --request GET "${JFROG_URL}/ui/api/v1/system/security/token?services[]=all" \
                                  --header "accept: application/json, text/plain, */*" \
                                  --header "x-requested-with: XMLHttpRequest" \
                                  --header "cookie: ACCESSTOKEN=${ACCESSTOKEN}; REFRESHTOKEN=${REFRESHTOKEN}")
            - export PROJECT_ACCESS_TOKEN=${ACCESS_KEY}
            - echo "Unset ARTIFACTORY_USERNAME and ARTIFACTORY_PASSWORD, acceptance test will use XRAY_ACCESS_TOKEN instead"
            - unset ARTIFACTORY_USERNAME && unset ARTIFACTORY_PASSWORD
            - export TF_ACC=1
            - make acceptance
            - make install -e TARGET_ARCH=linux_amd64
          onSuccess:
            - >-
              if [[ "${CLEANUP_RESOURCES}" == true ]]; then
                echo "Delete GKE cluster."
                cd ${res_terraform_provider_shared_resourcePath}
                ./scripts/delete_cluster.sh && cd ${PWD}
                send_notification partnersSlack --text "Terraform Provider Project run is completed. Version ${PROVIDER_VERSION:-" wasn't set"}. GKE cluster *${GKE_CLUSTER}* was deleted."
              else
                send_notification partnersSlack --text "Terraform Provider Project run is completed. Version ${PROVIDER_VERSION:-" wasn't set"}. GKE cluster *${GKE_CLUSTER}* wasn't deleted."
              fi
          onFailure:
            - echo "Failure, sending status to GitHub and Slack."
            - export STATE="failure"
            - export DESCRIPTION="Pipeline has failed."
            - cd ${res_terraform_provider_shared_resourcePath}
            - ./scripts/github-status.sh ${res_terraform_provider_project_gitProvider_token} ${res_terraform_provider_project_gitRepoFullName} ${res_terraform_provider_project_commitSha} && cd ${PWD}
            - send_notification partnersSlack --text "<${res_terraform_provider_project_gitRepoRepositoryHttpsUrl}|Terraform Provider Project>. Pipeline failed on <${step_url}|${step_name}> step. GKE cluster ${GKE_CLUSTER} wasn't deleted."
          onComplete:
            - echo "Complete"

      - name: pr_info_add_rt_version
        type: Bash
        configuration:
          integrations:
            - name: partnersSlack
            - name: partnership_jfrog_io
            - name: partnership_github
          inputSteps:
            - name: build_and_run_tf_provider
          inputResources:
            - name: terraform_provider_project
        execution:
          onStart:
            - echo "Preparing for work..."
            - echo "Collect information about the PR and send a Slack notification"
          onExecute:
            - printenv
            - export PR_URL=${res_terraform_provider_project_commitUrl}
            - export PR_COMMITTER=${res_terraform_provider_project_committerLogin}
            - export PR_BRANCH=${res_terraform_provider_project_headCommitRef}
            - >-
              if [[ -z "${PR_BRANCH}" ]]; then
                echo "No headCommitRef (PR branch), exit without adding changes to CHANGELOG.md"
                exit 0
              fi
            ## PR_TITLE var is used in the Slack message. We need to escape &, > and < per Slack documentation.
            ## They will be replaced with &amp;, &gt; and &lt; respectively.
            - export PR_TITLE=$(echo ${res_terraform_provider_project_commitMessage:0:100}... | sed -e 's/\&/\&amp;/g' -e 's/>/\&gt;/g' -e 's/</\&lt;/g')
            - >-
              if [[ -z "${PR_URL}" ]]; then
                echo "PR was not created (already exists from this head branch?). PR link is empty!"
                exit 1
              fi
            - cd ${res_terraform_provider_project_resourcePath}
            - git checkout -b ${PR_BRANCH}
            - sed -i -E "0,/(##\s.+\..+\..+\s\(.+\)).*/ s/(##\s.+\..+\..+\s\(.+\)).*/\1. Tested on Artifactory ${ARTIFACTORY_VERSION} and Xray ${XRAY_VERSION}/" CHANGELOG.md
            - head -10 CHANGELOG.md
            - git add CHANGELOG.md
            - export REGEX="Changes to be committed*"
            - export GIT_STATUS=$(git status)
            - >-
              if [[ ${GIT_STATUS} =~ ${REGEX} ]]; then
                echo "Adding Artifactory and Xray versions to CHANGELOG.md"
                git config --global user.name 'JFrog CI'
                git config --global user.email 'jfrog-solutions-ci+1@jfrog.com'
                git config --get user.name
                git config --get user.email
                git commit --author="JFrog CI <jfrog-solutions-ci+1@jfrog.com>" -m "JFrog Pipelines - Add Artifactory and Xray versions to CHANGELOG.md"
                git push https://${res_terraform_provider_project_gitProvider_token}${TFProviderRepo}
              else
                echo "There is nothing to commit, Artifactory version didn't change since last commit"
              fi
          onSuccess:
            - echo "Success"
            - echo "All tests passed successfully."
            - export STATE="success"
            - export DESCRIPTION="Pipeline has failed."
            - cd ${res_terraform_provider_shared_resourcePath}
            - ./scripts/github-status.sh ${res_terraform_provider_project_gitProvider_token} ${res_terraform_provider_project_gitRepoFullName} ${res_terraform_provider_project_commitSha} && cd ${PWD}
            - >-
              if [[ ! -z ${PR_BRANCH} ]]; then
                echo ${res_terraform_provider_project_gitRepoRepositoryHttpsUrl}
                echo ${PR_URL}
                echo ${PR_TITLE}
                send_notification partnersSlack --text "<${res_terraform_provider_project_gitRepoRepositoryHttpsUrl}|Terraform Provider Project>. A new PR was submitted by *${PR_COMMITTER}* - <${PR_URL}|${PR_TITLE}> branch *${PR_BRANCH}*. Changes tested successfully. <@U01H1SLSPA8> or <@UNDRUL1EU> please, review and merge."
              fi
          onFailure:
            - echo "Failure, sending status to GitHub and Slack."
            - export STATE="failure"
            - export DESCRIPTION="Pipeline has failed."
            - cd ${res_terraform_provider_shared_resourcePath}
            - ./scripts/github-status.sh ${res_terraform_provider_project_gitProvider_token} ${res_terraform_provider_project_gitRepoFullName} ${res_terraform_provider_project_commitSha} && cd ${PWD
            - >-
              if [[ -z "${PR_URL}" ]]; then
                send_notification partnersSlack --text "<${res_terraform_provider_project_gitRepoRepositoryHttpsUrl}|Terraform Provider Project>. Pipeline failed on <${step_url}|${step_name}> step. PR was not created (already exists from this head branch?)"
              else
                send_notification partnersSlack --text "<${res_terraform_provider_project_gitRepoRepositoryHttpsUrl}|Terraform Provider Project>. Pipeline failed on <${step_url}|${step_name}> step"
              fi
          onComplete:
            - echo "Cleaning up"